# version: '3'
services:
  redis:
    image: redis/redis-stack-server
    container_name: pipek-redis
    volumes:
      - redis_data:/data
    restart: always
    networks:
      - default
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  postgres:
    hostname: postgres
    container_name: postgres
    image: 'postgres:14-bullseye'
    environment:
        POSTGRES_USER: 'airflow'
        POSTGRES_PASSWORD: 'airflow'
        POSTGRES_DB: 'airflow'
        PGDATA: /data/postgres
    volumes:
        - postgres:/data/postgres
    ports:
        - "5432:5432"
    # networks:
    #     - airflow
    restart: on-failure
    healthcheck:
        test: ["CMD", "pg_isready"]
        interval: 60s
        timeout: 20s
        retries: 3
    deploy:
      resources:
        limits:
          memory: 400MB
  

  postgresql:
    image: docker.io/library/postgres:16
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 60s
      retries: 5
      timeout: 5s
    ports:
      - 5433:5432
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=CoEpasswd
      - POSTGRES_USER=coe
      - POSTGRES_DB=schematics_appdb
    logging:
      options:
        max-size: "10m"
        max-file: "3"


  web:
    build: .
    image: pipek-image_w
    container_name: pipek-web
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./dev/dash/:/app
    ports:
      - 8080:8080
    links:
      - redis
    depends_on:
      - redis
    networks:
      - default
    restart: always
    environment:
      PIPEK_ENV: /app/.env.dev
    env_file:
      - dev/dash/.env.dev
    command: 
      /venv/bin/pipek-dash -H 0.0.0.0 --port 8080 -d
      # pipek.cmd.web:main - H 0.0.0.0 --port 8080 -d
    logging:
      options:
        max-size: "10m"
        max-file: "3"

  controller:
    build: .
    image: pipek-image_w
    container_name: pipek-controller
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./dev/dash/:/app
    links:
      - redis
    depends_on:
      - redis
    networks:
      - default
    restart: always
    environment:
      PIPEK_ENV: /app/.env.dev
    env_file:
      - dev/dash/.env.dev
    command:
      /venv/bin/pipek-controller
      # pipek.cmd.controller:main

    logging:
      options:
        max-size: "10m"
        max-file: "3"


  worker:
    build: .
    image: pipek-image_w
    container_name: pipek-worker
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./dev/dash/:/app
    depends_on:
      - redis
    links:
      - redis
    restart: always
    env_file:
      - dev/dash/.env.dev
    environment:
      PIPEK_ENV: /app/.env.dev
    command:
      /venv/bin/pipek-worker
      # pipek.cmd.worker:main
    logging:
      options:
        max-size: "10m"
        max-file: "3"
  
  airflow-webserver:
        hostname: airflow
        container_name: airflow
        image: andrejunior/airflow-spark:latest
        # image: docker-airflow2:latest
        restart: always
        # networks:
        #     - airflow
        depends_on:
            - postgres
            # - minio
            # - spark-master
            # - spark-worker
        environment:   
            - AIRFLOW__CORE__LOAD_EXAMPLES=False
            - LOAD_EX=n
            - EXECUTOR=Local    
        volumes:
            - airflow-data:/usr/local/airflow/data
            - ./src/dags:/usr/local/airflow/dags
            - ./src/spark/applications:/usr/local/spark/applications            
            - ./src/spark/assets:/usr/local/spark/assets     
        ports:
            - "8085:8080"
        command: webserver
        healthcheck:
            test: ["CMD-SHELL", "[ -f /usr/local/airflow/airflow-webserver.pid ]"]
            interval: 30s
            timeout: 30s
            retries: 3


networks:
  default:

volumes:
  redis_data:
  postgresql_data:
  airflow-data:
  postgres:
